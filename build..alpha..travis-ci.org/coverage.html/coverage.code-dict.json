{"/home/travis/build/npmtest/node-npmtest-homebridge-http/test.js":"/* istanbul instrument in package npmtest_homebridge_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-http/lib.npmtest_homebridge_http.js":"/* istanbul instrument in package npmtest_homebridge_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_http = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_http = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-http/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-http && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_http */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_http\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_http.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_http.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_http.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_http.__dirname + '/lib.npmtest_homebridge_http.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-http/node_modules/homebridge-http/index.js":"var Service, Characteristic;\nvar request = require(\"request\");\nvar pollingtoevent = require('polling-to-event');\n\n\tmodule.exports = function(homebridge){\n\t\tService = homebridge.hap.Service;\n\t\tCharacteristic = homebridge.hap.Characteristic;\n\t\thomebridge.registerAccessory(\"homebridge-http\", \"Http\", HttpAccessory);\n\t}\n\n\n\tfunction HttpAccessory(log, config) {\n\t\tthis.log = log;\n\n\t\t// url info\n\t\tthis.on_url                 = config[\"on_url\"];\n\t\tthis.on_body                = config[\"on_body\"];\n\t\tthis.off_url                = config[\"off_url\"];\n\t\tthis.off_body               = config[\"off_body\"];\n\t\tthis.status_url             = config[\"status_url\"];\n\t\tthis.brightness_url         = config[\"brightness_url\"];\n\t\tthis.brightnesslvl_url      = config[\"brightnesslvl_url\"];\n\t\tthis.http_method            = config[\"http_method\"] \t  \t \t|| \"GET\";;\n\t\tthis.http_brightness_method = config[\"http_brightness_method\"]  || this.http_method;\n\t\tthis.username               = config[\"username\"] \t  \t \t \t|| \"\";\n\t\tthis.password               = config[\"password\"] \t  \t \t \t|| \"\";\n\t\tthis.sendimmediately        = config[\"sendimmediately\"] \t \t|| \"\";\n\t\tthis.service                = config[\"service\"] \t  \t \t \t|| \"Switch\";\n\t\tthis.name                   = config[\"name\"];\n\t\tthis.brightnessHandling     = config[\"brightnessHandling\"] \t \t|| \"no\";\n\t\tthis.switchHandling \t\t= config[\"switchHandling\"] \t\t \t|| \"no\";\n\t\t\n\t\t//realtime polling info\n\t\tthis.state = false;\n\t\tthis.currentlevel = 0;\n\t\tvar that = this;\n\t\t\n\t\t// Status Polling, if you want to add additional services that don't use switch handling you can add something like this || (this.service==\"Smoke\" || this.service==\"Motion\"))\n\t\tif (this.status_url && this.switchHandling ==\"realtime\") {\n\t\t\tvar powerurl = this.status_url;\n\t\t\tvar statusemitter = pollingtoevent(function(done) {\n\t        \tthat.httpRequest(powerurl, \"\", \"GET\", that.username, that.password, that.sendimmediately, function(error, response, body) {\n            \t\tif (error) {\n                \t\tthat.log('HTTP get power function failed: %s', error.message);\n\t\t                callback(error);\n            \t\t} else {               \t\t\t\t    \n\t\t\t\t\t\tdone(null, body);\n            \t\t}\n        \t\t})\n\t\t\t}, {longpolling:true,interval:300,longpollEventName:\"statuspoll\"});\n\n\t\tstatusemitter.on(\"statuspoll\", function(data) {       \n        \tvar binaryState = parseInt(data);\n\t    \tthat.state = binaryState > 0;\n\t\t\tthat.log(that.service, \"received power\",that.status_url, \"state is currently\", binaryState); \n\t\t\t// switch used to easily add additonal services\n\t\t\tswitch (that.service) {\n\t\t\t\tcase \"Switch\":\n\t\t\t\t\tif (that.switchService ) {\n\t\t\t\t\t\tthat.switchService .getCharacteristic(Characteristic.On)\n\t\t\t\t\t\t.setValue(that.state);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Light\":\n\t\t\t\t\tif (that.lightbulbService) {\n\t\t\t\t\t\tthat.lightbulbService.getCharacteristic(Characteristic.On)\n\t\t\t\t\t\t.setValue(that.state);\n\t\t\t\t\t}\t\t\n\t\t\t\t\tbreak;\t\t\t\n\t\t\t\t}        \n\t\t});\n\n\t}\n\t// Brightness Polling\n\tif (this.brightnesslvl_url && this.brightnessHandling ==\"realtime\") {\n\t\tvar brightnessurl = this.brightnesslvl_url;\n\t\tvar levelemitter = pollingtoevent(function(done) {\n\t        \tthat.httpRequest(brightnessurl, \"\", \"GET\", that.username, that.password, that.sendimmediately, function(error, response, responseBody) {\n            \t\tif (error) {\n                \t\t\tthat.log('HTTP get power function failed: %s', error.message);\n\t\t\t\t\t\t\treturn;\n            \t\t} else {               \t\t\t\t    \n\t\t\t\t\t\tdone(null, responseBody);\n            \t\t}\n        \t\t}) // set longer polling as slider takes longer to set value\n    \t}, {longpolling:true,interval:2000,longpollEventName:\"levelpoll\"});\n\n\t\tlevelemitter.on(\"levelpoll\", function(data) {  \n\t\t\tthat.currentlevel = parseInt(data);\n\n\t\t\tif (that.lightbulbService) {\t\t\t\t\n\t\t\t\tthat.log(that.service, \"received brightness\",that.brightnesslvl_url, \"level is currently\", that.currentlevel); \t\t        \n\t\t\t\tthat.lightbulbService.getCharacteristic(Characteristic.Brightness)\n\t\t\t\t.setValue(that.currentlevel);\n\t\t\t}        \n    \t});\n\t}\n\t}\n\n\tHttpAccessory.prototype = {\n\n\thttpRequest: function(url, body, method, username, password, sendimmediately, callback) {\n\t\trequest({\n\t\t\turl: url,\n\t\t\tbody: body,\n\t\t\tmethod: method,\n\t\t\trejectUnauthorized: false,\n\t\t\tauth: {\n\t\t\t\tuser: username,\n\t\t\t\tpass: password,\n\t\t\t\tsendImmediately: sendimmediately\n\t\t\t}\n\t\t},\n\t\tfunction(error, response, body) {\n\t\t\tcallback(error, response, body)\n\t\t})\n\t},\n\n\tsetPowerState: function(powerOn, callback) {\n\t\tvar url;\n\t\tvar body;\n\t\t\n\t\tif (!this.on_url || !this.off_url) {\n\t\t\t\tthis.log.warn(\"Ignoring request; No power url defined.\");\n\t\t\t\tcallback(new Error(\"No power url defined.\"));\n\t\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (powerOn) {\n\t\t\turl = this.on_url;\n\t\t\tbody = this.on_body;\n\t\t\tthis.log(\"Setting power state to on\");\n\t\t} else {\n\t\t\turl = this.off_url;\n\t\t\tbody = this.off_body;\n\t\t\tthis.log(\"Setting power state to off\");\n\t\t}\n\t\t\n\t\tthis.httpRequest(url, body, this.http_method, this.username, this.password, this.sendimmediately, function(error, response, responseBody) {\n\t\t\tif (error) {\n\t\t\tthis.log('HTTP set power function failed: %s', error.message);\n\t\t\tcallback(error);\n\t\t\t} else {\n\t\t\tthis.log('HTTP set power function succeeded!');\n\t\t\tcallback();\n\t\t\t}\n\t\t}.bind(this));\n\t},\n  \n  getPowerState: function(callback) {\n\tif (!this.status_url) {\n\t\tthis.log.warn(\"Ignoring request; No status url defined.\");\n\t\tcallback(new Error(\"No status url defined.\"));\n\t\treturn;\n\t}\n\t\n\tvar url = this.status_url;\n\tthis.log(\"Getting power state\");\n\t\n\tthis.httpRequest(url, \"\", \"GET\", this.username, this.password, this.sendimmediately, function(error, response, responseBody) {\n\tif (error) {\n\t\tthis.log('HTTP get power function failed: %s', error.message);\n\t\tcallback(error);\n\t} else {\n\t\tvar binaryState = parseInt(responseBody);\n\t\tvar powerOn = binaryState > 0;\n\t\tthis.log(\"Power state is currently %s\", binaryState);\n\t\tcallback(null, powerOn);\n\t}\n\t}.bind(this));\n  },\n\n\tgetBrightness: function(callback) {\n\t\tif (!this.brightnesslvl_url) {\n\t\t\tthis.log.warn(\"Ignoring request; No brightness level url defined.\");\n\t\t\tcallback(new Error(\"No brightness level url defined.\"));\n\t\t\treturn;\n\t\t}\t\t\n\t\t\tvar url = this.brightnesslvl_url;\n\t\t\tthis.log(\"Getting Brightness level\");\n\t\n\t\t\tthis.httpRequest(url, \"\", \"GET\", this.username, this.password, this.sendimmediately, function(error, response, responseBody) {\n\t\t\tif (error) {\n\t\t\t\tthis.log('HTTP get brightness function failed: %s', error.message);\n\t\t\t\tcallback(error);\n\t\t\t} else {\t\t\t\n\t\t\t\tvar binaryState = parseInt(responseBody);\n\t\t\t\tvar level = binaryState;\n\t\t\t\tthis.log(\"brightness state is currently %s\", binaryState);\n\t\t\t\tcallback(null, level);\n\t\t\t}\n\t\t\t}.bind(this));\n\t  },\n\n\tsetBrightness: function(level, callback) {\n\t\t\n\t\tif (!this.brightness_url) {\n\t\t\tthis.log.warn(\"Ignoring request; No brightness url defined.\");\n\t\t\tcallback(new Error(\"No brightness url defined.\"));\n\t\t\treturn;\n\t\t}    \n\t\n\t\tvar url = this.brightness_url.replace(\"%b\", level)\n\t\n\t\tthis.log(\"Setting brightness to %s\", level);\n\t\n\t\tthis.httpRequest(url, \"\", this.http_brightness_method, this.username, this.password, this.sendimmediately, function(error, response, body) {\n\t\tif (error) {\n\t\t\tthis.log('HTTP brightness function failed: %s', error);\n\t\t\tcallback(error);\n\t\t} else {\n\t\t\tthis.log('HTTP brightness function succeeded!');\n\t\t\tcallback();\n\t\t}\n\t\t}.bind(this));\n\t},\n\n\tidentify: function(callback) {\n\t\tthis.log(\"Identify requested!\");\n\t\tcallback(); // success\n\t},\n\n\tgetServices: function() {\n\t\t\n\t\tvar that = this;\n\t\t\n\t\t// you can OPTIONALLY create an information service if you wish to override\n\t\t// the default values for things like serial number, model, etc.\n\t\tvar informationService = new Service.AccessoryInformation();\n\t\n\t\tinformationService\n\t\t.setCharacteristic(Characteristic.Manufacturer, \"HTTP Manufacturer\")\n\t\t.setCharacteristic(Characteristic.Model, \"HTTP Model\")\n\t\t.setCharacteristic(Characteristic.SerialNumber, \"HTTP Serial Number\");\n\t\n\t\tswitch (this.service) {\n\t\tcase \"Switch\": \n\t\t\tthis.switchService = new Service.Switch(this.name);\n\t\t\tswitch (this.switchHandling) {\t\n\t\t\t\t//Power Polling\t\t\t\n\t\t\t\tcase \"yes\":\t\t\t\t\t\n\t\t\t\t\tthis.switchService\n\t\t\t\t\t.getCharacteristic(Characteristic.On)\n\t\t\t\t\t.on('get', this.getPowerState.bind(this))\n\t\t\t\t\t.on('set', this.setPowerState.bind(this));\t\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"realtime\":\t\t\t\t\n\t\t\t\t\tthis.switchService\n\t\t\t\t\t.getCharacteristic(Characteristic.On)\n\t\t\t\t\t.on('get', function(callback) {callback(null, that.state)})\n\t\t\t\t\t.on('set', this.setPowerState.bind(this));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault\t:\t\n\t\t\t\t\tthis.switchService\n\t\t\t\t\t.getCharacteristic(Characteristic.On)\t\n\t\t\t\t\t.on('set', this.setPowerState.bind(this));\t\t\t\t\t\n\t\t\t\t\tbreak;}\n\t\t\t\t\treturn [this.switchService];\n\t\tcase \"Light\":\t\n\t\t\tthis.lightbulbService = new Service.Lightbulb(this.name);\t\t\t\n\t\t\tswitch (this.switchHandling) {\n\t\t\t//Power Polling\n\t\t\tcase \"yes\" :\n\t\t\t\tthis.lightbulbService\n\t\t\t\t.getCharacteristic(Characteristic.On)\n\t\t\t\t.on('get', this.getPowerState.bind(this))\n\t\t\t\t.on('set', this.setPowerState.bind(this));\n\t\t\t\tbreak;\n\t\t\tcase \"realtime\":\n\t\t\t\tthis.lightbulbService\n\t\t\t\t.getCharacteristic(Characteristic.On)\n\t\t\t\t.on('get', function(callback) {callback(null, that.state)})\n\t\t\t\t.on('set', this.setPowerState.bind(this));\n\t\t\t\tbreak;\n\t\t\tdefault:\t\t\n\t\t\t\tthis.lightbulbService\n\t\t\t\t.getCharacteristic(Characteristic.On)\t\n\t\t\t\t.on('set', this.setPowerState.bind(this));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Brightness Polling \n\t\t\tif (this.brightnessHandling == \"realtime\") {\n\t\t\t\tthis.lightbulbService \n\t\t\t\t.addCharacteristic(new Characteristic.Brightness())\n\t\t\t\t.on('get', function(callback) {callback(null, that.currentlevel)})\n\t\t\t\t.on('set', this.setBrightness.bind(this));\n\t\t\t} else if (this.brightnessHandling == \"yes\") {\n\t\t\t\tthis.lightbulbService\n\t\t\t\t.addCharacteristic(new Characteristic.Brightness())\n\t\t\t\t.on('get', this.getBrightness.bind(this))\n\t\t\t\t.on('set', this.setBrightness.bind(this));\t\t\t\t\t\t\t\n\t\t\t}\n\t\n\t\t\treturn [informationService, this.lightbulbService];\n\t\t\tbreak;\t\t\n\t\t}\n\t}\n};"}